#pragma once

#include <grpc/support/time.h>
#include <google/protobuf/descriptor.h>

namespace grpcfy::core {

/**
 * @brief Generate zero duration timestamp
 * @details Especially used to pass it to grpc::Alarm to switch execution context into CompletionQueue
 */
[[nodiscard]] inline gpr_timespec rightNow() noexcept
{
	return gpr_now(gpr_clock_type::GPR_CLOCK_REALTIME);
}

/**
 * @brief Obtain Service descriptor from global descriptors pool, which is generated by gRPC runtime
 * @param name Service to find, can be obtained from MyService::service_full_name() method
 * @return nullptr if Method not found
 */
[[nodiscard]] inline const google::protobuf::ServiceDescriptor *findService(const std::string &name) noexcept
{
	const auto *descriptors_pool = google::protobuf::DescriptorPool::generated_pool();
	assert(descriptors_pool);
	return descriptors_pool->FindServiceByName(name);
}

/**
 * @brief Obtains Method descriptor from Service
 * @param method_name Method to find
 * @param service_descriptor Service to find into
 * @return nullptr if Service not found
 */
[[nodiscard]] inline const google::protobuf::MethodDescriptor *findMethod(
    const std::string &method_name,
    const google::protobuf::ServiceDescriptor *service_descriptor)
{
	return service_descriptor->FindMethodByName(method_name);
}

/**
 * @brief Obtains Method descriptor from Service
 * @details Combines two previous methods to easy Method descriptor retrieval
 * @param service_name Service to find into
 * @param method_name Method to find
 * @return nullptr if Service or Method not found
 */
[[nodiscard]] inline const google::protobuf::MethodDescriptor *findMethod(const std::string &service_name,
                                                                          const std::string &method_name)
{
	if(const auto service = findService(service_name)) {
		return findMethod(method_name, service);
	}
	return nullptr;
}

/**
 * @brief Obtain list of Service known methods
 * @param service_descriptor Service to list
 */
[[nodiscard]] inline std::vector<const google::protobuf::MethodDescriptor *> listMethods(
    const google::protobuf::ServiceDescriptor *service_descriptor) noexcept
{
	std::vector<const google::protobuf::MethodDescriptor *> methods;
	methods.reserve(service_descriptor->method_count());
	for(auto method_idx{0}; method_idx < service_descriptor->method_count(); ++method_idx) {
		methods.emplace_back(service_descriptor->method(method_idx));
	}
	return methods;
}

}  // namespace grpcfy::core